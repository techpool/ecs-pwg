# process id
pid /run/nginx.pid;

# set worker processes based on your CPU cores
worker_processes 2;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS (default 2000).
# worker_rlimit_nofile 65536;

# thread pool
# thread_pool default threads=128 max_queue=65536;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {

    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
	worker_connections 2048;

    # to achieve better performance
    accept_mutex off;

    # optmized to serve many clients with each thread, essential for linux
	use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
	multi_accept on;

}


http {

    # http core module
    # http://nginx.org/en/docs/http/ngx_http_core_module.html

    # allowed sites info
	include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/servers/*;

    # logging
    # no access logs (reduce disk io)
    # http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    access_log off;

    # error logs - only log critical errors (reduce disk io)
    # http://nginx.org/en/docs/ngx_core_module.html#error_log
    error_log syslog:server=unix:/dev/log crit;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile
    sendfile on;

    # send headers in one peace, its better then sending them one by one 
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection
    reset_timedout_connection on;

    # keepalive timeout
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
    keepalive_timeout  60;

    # maximum size of the types hash tables
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#types_hash_max_size	
    types_hash_max_size 2048;


    # gzip module
    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html
    gzip on;
    gzip_comp_level  2; # increasing the gzip_comp_level too high as the server will begin wasting cpu cycles
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types *;
    gzip_disable msie6;


    # proxy module
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html
    proxy_connect_timeout 60s;
    proxy_send_timeout 300s;
	proxy_read_timeout 300s;

    # thread pool
    # aio threads=default;
    
}
