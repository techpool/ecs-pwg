# process id
pid /run/nginx.pid;

# set worker processes based on your CPU cores
worker_processes 1;

# number of file descriptors used for nginx
# the limit for the maximum FDs on the server is usually set by the OS (default 2000).
worker_rlimit_nofile 65535;

# thread pool max_queue=65536 default
thread_pool default threads=512;

# provides the configuration file context in which the directives that affect connection processing are specified.
events {

    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
	worker_connections 512;

    # to achieve better performance - default behaviour is off
    # The accept_mutex parameter available under the events section will enable each of the available workers to accept new connections one by one.
    # If the flag is turned to off, all of the available workers will wake up from the waiting state, but only one worker will process the connection. This results in the Thundering Herd phenomenon, which is repeated a number of times per second. The phenomenon causes reduced server performance as all the woken-up workers take up CPU time before going back to the wait state. This results in unproductive CPU cycles and nonutilized context switches.
    accept_mutex on;

    # optmized to serve many clients with each thread, essential for linux
	use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
	multi_accept on;

}


http {

    # http core module
    # http://nginx.org/en/docs/http/ngx_http_core_module.html

    # allowed sites info
	include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/servers/*;

    # logging
    # no access logs (reduce disk io)
    # http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    access_log off;

    # error logs - only log critical errors (reduce disk io)
    # http://nginx.org/en/docs/ngx_core_module.html#error_log
    error_log syslog:server=unix:/dev/log crit;

    # copies data between one FD and other from within the kernel
    # faster then read() + write()
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile
    sendfile on;

    # send headers in one peace, its better then sending them one by one 
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush
    tcp_nopush on;

    # don't buffer data sent, good for small data bursts in real time
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay
    tcp_nodelay on;

    # allow the server to close connection on non responding client, this will free up memory
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#reset_timedout_connection
    reset_timedout_connection on;

    # keepalive timeout
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#keepalive_timeout
    keepalive_timeout  60;

    # maximum size of the types hash tables
    # http://nginx.org/en/docs/http/ngx_http_core_module.html#types_hash_max_size	
    types_hash_max_size 2048;


    # gzip module
    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html
    gzip on;
    gzip_min_length  1000;
    gzip_proxied any;
    gzip_types *;
    gzip_disable msie6;


    # proxy module
    # http://nginx.org/en/docs/http/ngx_http_proxy_module.html
    proxy_connect_timeout 600;
    proxy_send_timeout 600;
	proxy_read_timeout 600;

    # thread pool
    aio threads=default;

}

daemon off;
